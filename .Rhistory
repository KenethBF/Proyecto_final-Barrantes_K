}")
ggdag(DAG1, layout = "circle") + theme_dag()
tidy_dagitty(DAG)
tidy_dagitty(DAG1)
DAG1 <- dagitty("dag{
l -> a ; p -> a; y -> a; d -> a; l -> p; p -> d; d -> j; p -> j; a -> j; l -> j; y -> j
p [exposure]
a [outcome]
j [unobserved]
d [unobserved]
}")
tidy_dagitty(DAG1)
ggdag(DAG1, layout = "circle") + theme_dag()
tidy_dagitty(DAG)
tidy_dagitty(DAG1)
DAG <- dagitty("dag{
l -> a ;
p -> a;
y -> a;
d -> a;
l -> p;
p -> d;
d -> j;
p -> j;
a -> j;
l -> j;
y -> j
p [exposure]
a [outcome]
j [unobserved]
d [unobserved]
}")
tidy_dagitty(DAG)
ggdag(DAG, layout = "circle") + theme_dag()
tidy_dagitty(DAG)
tidy_dagitty(DAG)
tidy_dagitty(DAG)
tidy_dagitty(DAG)
tidy_dagitty(DAG)
tidy_dagitty(DAG)
tidy_dagitty(DAG)
tidy_dagitty(DAG)
tidy_dagitty(DAG)
adjustmentSets(x = DAG, exposure = "p", outcome = "a", type="all", effect = "total")
td_DAG <- tidy_dagitty(DAG)
# d relativos
D_node <- node_dseparated(td_DAG, "p", "a", controlling_for = "l, y")
# d relativos
D_node <- node_dseparated(td_DAG, "p", "a", controlling_for = "l")
# grafico
ggplot(D_node, aes(
x = x,
y = y,
xend = xend,
yend = yend,
shape = adjusted,
col= d_relationship
)) +
geom_dag_edges_link()+
geom_dag_point() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
expand_plot(expand_y = expansion(c(0.2, 0.2))) +
scale_color_manual(values = wes_palette("IsleofDogs1"),
name = "d-relationship",
na.value = "grey85"
)
library(wesanderson)
# grafico
ggplot(D_node, aes(
x = x,
y = y,
xend = xend,
yend = yend,
shape = adjusted,
col= d_relationship
)) +
geom_dag_edges_link()+
geom_dag_point() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
expand_plot(expand_y = expansion(c(0.2, 0.2))) +
scale_color_manual(values = wes_palette("IsleofDogs1"),
name = "d-relationship",
na.value = "grey85"
)
tidy_dagitty(DAG)
# grafico
ggplot(D_node, aes(
x = p,
y = a,
xend = xend,
yend = yend,
shape = adjusted,
col= d_relationship
)) +
geom_dag_edges_link()+
geom_dag_point() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
expand_plot(expand_y = expansion(c(0.2, 0.2))) +
scale_color_manual(values = wes_palette("IsleofDogs1"),
name = "d-relationship",
na.value = "grey85"
)
# grafico
ggplot(D_node, aes(
x = a,
y = y,
xend = xend,
yend = yend,
shape = adjusted,
col= d_relationship
)) +
geom_dag_edges_link()+
geom_dag_point() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
expand_plot(expand_y = expansion(c(0.2, 0.2))) +
scale_color_manual(values = wes_palette("IsleofDogs1"),
name = "d-relationship",
na.value = "grey85"
)
# grafico
ggplot(D_node, aes(
x = x,
y = y,
xend = xend,
yend = yend,
shape = adjusted,
col= d_relationship
)) +
geom_dag_edges_link()+
geom_dag_point() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
expand_plot(expand_y = expansion(c(0.2, 0.2))) +
scale_color_manual(values = wes_palette("IsleofDogs1"),
name = "d-relationship",
na.value = "grey85"
)
adjustmentSets(x = DAG, exposure = "p", outcome = "a", type="all", effect = "total")
# d relativos
D_node <- node_dseparated(td_DAG, "p", "a", controlling_for = "y")
# grafico
ggplot(D_node, aes(
x = x,
y = y,
xend = xend,
yend = yend,
shape = adjusted,
col= d_relationship
)) +
geom_dag_edges_link()+
geom_dag_point() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
expand_plot(expand_y = expansion(c(0.2, 0.2))) +
scale_color_manual(values = wes_palette("IsleofDogs1"),
name = "d-relationship",
na.value = "grey85"
)
# d relativos
D_node <- node_dseparated(td_DAG, "p", "a", controlling_for = "y", controlling_for = "l")
# d relativos
D_node <- node_dseparated(td_DAG, "p", "a", controlling_for = "y")
# d relativos
D_node <- node_dseparated(td_DAG, "p", "a", controlling_for = "y" + "l")
# d relativos
D_node <- node_dseparated(td_DAG, "p", "a", controlling_for = "c(y, l))
# grafico
ggplot(D_node, aes(
x = x,
y = y,
xend = xend,
yend = yend,
shape = adjusted,
col= d_relationship
)) +
geom_dag_edges_link()+
geom_dag_point() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
expand_plot(expand_y = expansion(c(0.2, 0.2))) +
scale_color_manual(values = wes_palette("IsleofDogs1"),
name = "d-relationship",
na.value = "grey85"
)
####### Información de sesión
sessionInfo()
# d relativos
D_node <- node_dseparated(td_DAG, "p", "a", controlling_for = "c(y, l))
# grafico
ggplot(D_node, aes(
x = x,
y = y,
xend = xend,
yend = yend,
shape = adjusted,
col= d_relationship
)) +
geom_dag_edges_link()+
geom_dag_point() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
expand_plot(expand_y = expansion(c(0.2, 0.2))) +
scale_color_manual(values = wes_palette("IsleofDogs1"),
name = "d-relationship",
na.value = "grey85"
)
####### Información de sesión
sessionInfo()
# d relativos
D_node <- node_dseparated(td_DAG, "p", "a", controlling_for = "c(y, l)")
# d relativos
D_node <- node_dseparated(td_DAG, "p", "a", controlling_for = "c(y + l)")
# d relativos
D_node <- node_dseparated(td_DAG, "p", "a", controlling_for = "y")
# d relativos
D_node <- node_dseparated(td_DAG, "p", "a", controlling_for = "l")
# d relativos
D_node <- node_dseparated(td_DAG, "p", "a", controlling_for = "l")
# grafico
ggplot(D_node, aes(
x = x,
y = y,
xend = xend,
yend = yend,
shape = adjusted,
col= d_relationship
)) +
geom_dag_edges_link()+
geom_dag_point() +
geom_dag_text(col = "white") +
theme_dag() +
scale_adjusted() +
expand_plot(expand_y = expansion(c(0.2, 0.2))) +
scale_color_manual(values = wes_palette("IsleofDogs1"),
name = "d-relationship",
na.value = "grey85"
)
impliedConditionalIndependencies(x = DAG, type = "missing.edge")
impliedConditionalIndependencies(x = DAG, type = "basis.set")
impliedConditionalIndependencies(x = DAG, type = "missing.edge")
impliedConditionalIndependencies(x = DAG, type = "basis.set")
DAG <- dagitty("dag{
l -> a ;
p -> a;
y -> a;
d -> a;
l -> p;
p -> d;
d -> j;
p -> j;
a -> j;
l -> j;
y -> j
p [exposure]
a [outcome]
j [unobserved]
d [unobserved]
}")
DAG <- dagitty("dag{
l -> a ;
p -> a;
y -> a;
d -> a;
l -> p;
p -> d;
d -> j;
p -> j;
a -> j;
l -> j;
y -> j
p [exposure]
a [outcome]
j [unobserved]
d [unobserved]
}")
tidy_dagitty(DAG)
ggdag(DAG, layout = "circle") + theme_dag()
adjustmentSets(x = DAG, exposure = "p", outcome = "a", type="all", effect = "total")
impliedConditionalIndependencies(x = DAG, type = "missing.edge")
impliedConditionalIndependencies(x = DAG, type = "basis.set")
library(readr)
Metazygia <- read_delim("Metazygia.csv",
";", escape_double = FALSE, col_types = cols(area = col_number(),
lugar = col_factor(levels = c("bosquecito",
"carteles")), luz = col_logical(),
posicion = col_factor(levels = c("alto",
"bajo", "medio"))), trim_ws = TRUE)
View(Metazygia)
area.test <- shapiro.test(Metazygia$area) # Prueba Shapiro para normalidad
print(area.test) # Distribución no normal p>
plotn <- function(x,main="Histograma de frecuencias y distribución normal",
xlab="Area",ylab="Variabilidad") {
min <- min(x)
max <- max(x)
media <- mean(x)
dt <- sd(x)
hist(x,freq=F,main=main,xlab=xlab,ylab=ylab)
curve(dnorm(x,media,dt), min, max,add = T,col="blue")
}
plotn(Metazygia$area,main="Distribución normal") # Graficamente distribución tampoco es normal
bartlett.test(Metazygia$area ~ Metazygia$lugar)  # Las varianzas son homogeneas
bartlett.test(Metazygia$area ~ Metazygia$luz)  # Las varianzas no son homogeneas
bartlett.test(Metazygia$area ~ Metazygia$posicion)  # Las varianzas son homogeneas
library(car) # Para homocedasticidad
leveneTest(Metazygia$area ~ Metazygia$lugar) # Las variaciones de los lugares no son equivalentes
leveneTest(Metazygia$area ~ Metazygia$posicion) # Las variaciones de las posiciones no son equivalentes
library(dagitty)
library(ggdag)
library(wesanderson)
DAG <- dagitty("dag{
l -> a ;
p -> a;
y -> a;
d -> a;
l -> p;
p -> d;
d -> j;
p -> j;
a -> j;
l -> j;
y -> j
p [exposure]
a [outcome]
j [unobserved]
d [unobserved]
}")
tidy_dagitty(DAG)
ggdag(DAG, layout = "circle") + theme_dag()
adjustmentSets(x = DAG, exposure = "p", outcome = "a", type="all", effect = "total")
impliedConditionalIndependencies(x = DAG, type = "missing.edge")
impliedConditionalIndependencies(x = DAG, type = "basis.set")
m1 <- lm(y ~ x + V)
sessionInfo()
adjustmentSets(x = DAG, exposure = "p", outcome = "a", type="all", effect = "total")
impliedConditionalIndependencies(x = DAG, type = "missing.edge")
impliedConditionalIndependencies(x = DAG, type = "basis.set")
m1 <- lm(Metazygia$lugar ~ Metazygia$luz + Metazygia$posicion)
m1 <- lm(Metazygia$area ~ Metazygia$luz + Metazygia$posicion)
summary(m1)
DAG <- dagitty("dag{  #Creación de DAG
l -> a ;
p -> a;
y -> a;
d -> a;
l -> p;
p -> d;
d -> j;
p -> j;
a -> j;
l -> j;
y -> j
p [exposure]
a [outcome]
j [unobserved]
d [unobserved]
}")
#Creación de DAG
DAG <- dagitty("dag{
l -> a ;
p -> a;
y -> a;
d -> a;
l -> p;
p -> d;
d -> j;
p -> j;
a -> j;
l -> j;
y -> j
p [exposure]
a [outcome]
j [unobserved]
d [unobserved]
}")
ggdag(DAG, layout = "circle") + theme_dag()
adjustmentSets(x = DAG, exposure = "p", outcome = "a", type="all", effect = "total")
adjustmentSets(x = DAG, exposure = "p", outcome = "a", type="all", effect = "total") # El DAG sugire
impliedConditionalIndependencies(x = DAG, type = "missing.edge") # Condiciones de independencia para que
impliedConditionalIndependencies(x = DAG, type = "basis.set") # Condiciones de independencia para que
# Creación de DAG con "a" como outcome o respuesta y "p" como causal o exposure
DAG <- dagitty("dag{
l -> area ;
p -> area;
y -> area;
d -> area;
l -> p;
p -> d;
d -> j;
p -> j;
area -> j;
l -> j;
y -> j
p [exposure]
area [outcome]
j [unobserved]
d [unobserved]
}")
ggdag(DAG, layout = "circle") + theme_dag() # DAG interacciones
# Creación de DAG con "a" como outcome o respuesta y "p" como causal o exposure
DAG <- dagitty("dag{
luz -> area ;
posición -> area;
lugar -> area;
daños -> area;
luz -> posición;
posición -> daños;
daños -> presas;
posición -> presas;
area -> presas;
luz -> presas;
lugar -> presas
posición [exposure]
area [outcome]
presas [unobserved]
daños [unobserved]
}")
# Creación de DAG con "a" como outcome o respuesta y "p" como causal o exposure
DAG <- dagitty("dag{
l -> a ;
p -> a;
y -> a;
d -> a;
l -> p;
p -> d;
d -> j;
p -> j;
a -> j;
l -> j;
y -> j
p [exposure]
a [outcome]
j [unobserved]
d [unobserved]
}")
ggdag(DAG, layout = "circle") + theme_dag() # DAG interacciones
adjustmentSets(x = DAG, exposure = "p", outcome = "a", type="all", effect = "total") # El DAG sugire
impliedConditionalIndependencies(x = DAG, type = "missing.edge") # Condiciones de independencia para que
impliedConditionalIndependencies(x = DAG, type = "basis.set") # Condiciones de independencia para que
setwd("~/UCR/Biolo/Reproducibles/Proyecto_final-Barrantes_K/Proyecto_final-Barrantes_K")
library(readr)
Metazygia <- read_delim("Metazygia.csv",
";", escape_double = FALSE,
col_types = cols(area = col_number(),
lugar = col_factor(levels = c("bosquecito",
"carteles")), luz = col_logical(),
posicion = col_factor(levels = c("alto",
"bajo", "medio"))), trim_ws = TRUE)
library(readr)
Metazygia <- read_delim("Metazygia.csv",
";", escape_double = FALSE,
col_types = cols(area = col_number(),
lugar = col_factor(levels = c("bosquecito", "carteles")),
luz = col_logical(),
posicion = col_factor(levels = c("alto", "bajo", "medio"))),
trim_ws = TRUE)
View(Metazygia)
area.test <- shapiro.test(Metazygia$area) # Prueba Shapiro para normalidad
print(area.test) # Distribución no normal p>
plotn <- function(x,main="Histograma de frecuencias y distribución normal",
xlab="Area",ylab="Variabilidad") {
min <- min(x)
max <- max(x)
media <- mean(x)
dt <- sd(x)
hist(x,freq=F,main=main,xlab=xlab,ylab=ylab)
curve(dnorm(x,media,dt), min, max,add = T,col="blue")
}
plotn(Metazygia$area,main="Distribución normal") # Graficamente distribución tampoco es normal
bartlett.test(Metazygia$area ~ Metazygia$lugar)  # Las varianzas son homogeneas
bartlett.test(Metazygia$area ~ Metazygia$luz)  # Las varianzas no son homogeneas
bartlett.test(Metazygia$area ~ Metazygia$posicion)  # Las varianzas son homogeneas
library(car) # Para homocedasticidad
leveneTest(Metazygia$area ~ Metazygia$lugar) # Las variaciones de los lugares no son equivalentes
leveneTest(Metazygia$area ~ Metazygia$posicion) # Las variaciones de las posiciones no son equivalentes
library(dagitty)
library(ggdag)
library(wesanderson)
# Creación de DAG con "a" como outcome o respuesta y "p" como causal o exposure
DAG <- dagitty("dag{
l -> a ;
p -> a;
y -> a;
d -> a;
l -> p;
p -> d;
d -> j;
p -> j;
a -> j;
l -> j;
y -> j
p [exposure]
a [outcome]
j [unobserved]
d [unobserved]
}")
ggdag(DAG, layout = "circle") + theme_dag() # DAG interacciones
adjustmentSets(x = DAG, exposure = "p", outcome = "a", type="all", effect = "total") # El DAG sugire
impliedConditionalIndependencies(x = DAG, type = "missing.edge") # Condiciones de independencia para que
impliedConditionalIndependencies(x = DAG, type = "basis.set") # Condiciones de independencia para que
sessionInfo()
